/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "node_modules_humane-js_humane_js";
export const ids = ["node_modules_humane-js_humane_js"];
export const modules = {

/***/ "./node_modules/humane-js/humane.js":
/*!******************************************!*\
  !*** ./node_modules/humane-js/humane.js ***!
  \******************************************/
/***/ (function(module) {

eval("/**\n * humane.js\n * Humanized Messages for Notifications\n * @author Marc Harter (@wavded)\n * @example\n *   humane.log('hello world');\n * @license MIT\n * See more usage examples at: http://wavded.github.com/humane-js/\n */\n\n;!function (name, context, definition) {\n   if (true) module.exports = definition(name, context)\n   else {}\n}('humane', this, function (name, context) {\n   var win = window\n   var doc = document\n\n   var ENV = {\n      on: function (el, type, cb) {\n         'addEventListener' in win ? el.addEventListener(type,cb,false) : el.attachEvent('on'+type,cb)\n      },\n      off: function (el, type, cb) {\n         'removeEventListener' in win ? el.removeEventListener(type,cb,false) : el.detachEvent('on'+type,cb)\n      },\n      bind: function (fn, ctx) {\n         return function () { fn.apply(ctx,arguments) }\n      },\n      isArray: Array.isArray || function (obj) { return Object.prototype.toString.call(obj) === '[object Array]' },\n      config: function (preferred, fallback) {\n         return preferred != null ? preferred : fallback\n      },\n      transSupport: false,\n      useFilter: /msie [678]/i.test(navigator.userAgent), // sniff, sniff\n      _checkTransition: function () {\n         var el = doc.createElement('div')\n         var vendors = { webkit: 'webkit', Moz: '', O: 'o', ms: 'MS' }\n\n         for (var vendor in vendors)\n            if (vendor + 'Transition' in el.style) {\n               this.vendorPrefix = vendors[vendor]\n               this.transSupport = true\n            }\n      }\n   }\n   ENV._checkTransition()\n\n   var Humane = function (o) {\n      o || (o = {})\n      this.queue = []\n      this.baseCls = o.baseCls || 'humane'\n      this.addnCls = o.addnCls || ''\n      this.timeout = 'timeout' in o ? o.timeout : 2500\n      this.waitForMove = o.waitForMove || false\n      this.clickToClose = o.clickToClose || false\n      this.timeoutAfterMove = o.timeoutAfterMove || false\n      this.container = o.container\n\n      try { this._setupEl() } // attempt to setup elements\n      catch (e) {\n        ENV.on(win,'load',ENV.bind(this._setupEl, this)) // dom wasn't ready, wait till ready\n      }\n   }\n\n   Humane.prototype = {\n      constructor: Humane,\n      _setupEl: function () {\n         var el = doc.createElement('div')\n         el.style.display = 'none'\n         if (!this.container){\n           if(doc.body) this.container = doc.body;\n           else throw 'document.body is null'\n         }\n         this.container.appendChild(el)\n         this.el = el\n         this.removeEvent = ENV.bind(function(){\n            var timeoutAfterMove = ENV.config(this.currentMsg.timeoutAfterMove,this.timeoutAfterMove)\n            if (!timeoutAfterMove){\n               this.remove()\n            } else {\n               setTimeout(ENV.bind(this.remove,this),timeoutAfterMove)\n            }\n         },this)\n\n         this.transEvent = ENV.bind(this._afterAnimation,this)\n         this._run()\n      },\n      _afterTimeout: function () {\n         if (!ENV.config(this.currentMsg.waitForMove,this.waitForMove)) this.remove()\n\n         else if (!this.removeEventsSet) {\n            ENV.on(doc.body,'mousemove',this.removeEvent)\n            ENV.on(doc.body,'click',this.removeEvent)\n            ENV.on(doc.body,'keypress',this.removeEvent)\n            ENV.on(doc.body,'touchstart',this.removeEvent)\n            this.removeEventsSet = true\n         }\n      },\n      _run: function () {\n         if (this._animating || !this.queue.length || !this.el) return\n\n         this._animating = true\n         if (this.currentTimer) {\n            clearTimeout(this.currentTimer)\n            this.currentTimer = null\n         }\n\n         var msg = this.queue.shift()\n         var clickToClose = ENV.config(msg.clickToClose,this.clickToClose)\n\n         if (clickToClose) {\n            ENV.on(this.el,'click',this.removeEvent)\n            ENV.on(this.el,'touchstart',this.removeEvent)\n         }\n\n         var timeout = ENV.config(msg.timeout,this.timeout)\n\n         if (timeout > 0)\n            this.currentTimer = setTimeout(ENV.bind(this._afterTimeout,this), timeout)\n\n         if (ENV.isArray(msg.html)) msg.html = '<ul><li>'+msg.html.join('<li>')+'</ul>'\n\n         this.el.innerHTML = msg.html\n         this.currentMsg = msg\n         this.el.className = this.baseCls\n         if (ENV.transSupport) {\n            this.el.style.display = 'block'\n            setTimeout(ENV.bind(this._showMsg,this),50)\n         } else {\n            this._showMsg()\n         }\n\n      },\n      _setOpacity: function (opacity) {\n         if (ENV.useFilter){\n            try{\n               this.el.filters.item('DXImageTransform.Microsoft.Alpha').Opacity = opacity*100\n            } catch(err){}\n         } else {\n            this.el.style.opacity = String(opacity)\n         }\n      },\n      _showMsg: function () {\n         var addnCls = ENV.config(this.currentMsg.addnCls,this.addnCls)\n         if (ENV.transSupport) {\n            this.el.className = this.baseCls+' '+addnCls+' '+this.baseCls+'-animate'\n         }\n         else {\n            var opacity = 0\n            this.el.className = this.baseCls+' '+addnCls+' '+this.baseCls+'-js-animate'\n            this._setOpacity(0) // reset value so hover states work\n            this.el.style.display = 'block'\n\n            var self = this\n            var interval = setInterval(function(){\n               if (opacity < 1) {\n                  opacity += 0.1\n                  if (opacity > 1) opacity = 1\n                  self._setOpacity(opacity)\n               }\n               else clearInterval(interval)\n            }, 30)\n         }\n      },\n      _hideMsg: function () {\n         var addnCls = ENV.config(this.currentMsg.addnCls,this.addnCls)\n         if (ENV.transSupport) {\n            this.el.className = this.baseCls+' '+addnCls\n            ENV.on(this.el,ENV.vendorPrefix ? ENV.vendorPrefix+'TransitionEnd' : 'transitionend',this.transEvent)\n         }\n         else {\n            var opacity = 1\n            var self = this\n            var interval = setInterval(function(){\n               if(opacity > 0) {\n                  opacity -= 0.1\n                  if (opacity < 0) opacity = 0\n                  self._setOpacity(opacity);\n               }\n               else {\n                  self.el.className = self.baseCls+' '+addnCls\n                  clearInterval(interval)\n                  self._afterAnimation()\n               }\n            }, 30)\n         }\n      },\n      _afterAnimation: function () {\n         if (ENV.transSupport) ENV.off(this.el,ENV.vendorPrefix ? ENV.vendorPrefix+'TransitionEnd' : 'transitionend',this.transEvent)\n\n         if (this.currentMsg.cb) this.currentMsg.cb()\n         this.el.style.display = 'none'\n\n         this._animating = false\n         this._run()\n      },\n      remove: function (e) {\n         var cb = typeof e == 'function' ? e : null\n\n         ENV.off(doc.body,'mousemove',this.removeEvent)\n         ENV.off(doc.body,'click',this.removeEvent)\n         ENV.off(doc.body,'keypress',this.removeEvent)\n         ENV.off(doc.body,'touchstart',this.removeEvent)\n         ENV.off(this.el,'click',this.removeEvent)\n         ENV.off(this.el,'touchstart',this.removeEvent)\n         this.removeEventsSet = false\n\n         if (cb && this.currentMsg) this.currentMsg.cb = cb\n         if (this._animating) this._hideMsg()\n         else if (cb) cb()\n      },\n      log: function (html, o, cb, defaults) {\n         var msg = {}\n         if (defaults)\n           for (var opt in defaults)\n               msg[opt] = defaults[opt]\n\n         if (typeof o == 'function') cb = o\n         else if (o)\n            for (var opt in o) msg[opt] = o[opt]\n\n         msg.html = html\n         if (cb) msg.cb = cb\n         this.queue.push(msg)\n         this._run()\n         return this\n      },\n      spawn: function (defaults) {\n         var self = this\n         return function (html, o, cb) {\n            self.log.call(self,html,o,cb,defaults)\n            return self\n         }\n      },\n      create: function (o) { return new Humane(o) }\n   }\n   return new Humane()\n});\n\n\n//# sourceURL=webpack://uc/./node_modules/humane-js/humane.js?");

/***/ })

};
